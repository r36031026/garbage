mutate(mean_CSS = mean(LEVEL,na.rm = T),
sd_CSS = sd(LEVEL,na.rm = T),
max_CSS = max(LEVEL),
min_CSS = min(LEVEL),
median_CSS = median(LEVEL)
)
train = read.csv('./train.csv')
all%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
# some mapping table of mean and sd with level info
train%>%
group_by(County,Season)%>%
mutate(mean_county_season = mean(LEVEL,na.rm= T),
sd_county_season = sd(LEVEL,na.rm =T))%>%
ungroup()%>%
group_by(County)%>%
mutate(mean_county = mean(LEVEL,na.rm= T),
sd_county = sd(LEVEL,na.rm =T),
max_county = max(LEVEL),
min_county = min(LEVEL),
median_county = median(LEVEL)
)%>%
ungroup()%>%
group_by(Season,Seat)%>%
mutate(mean_season_seat = mean(LEVEL,na.rm = T),
sd_season_seat = sd(LEVEL,na.rm =T),
max_season_seat = max(LEVEL),
min_season_seat = min(LEVEL),
median_season_seat = median(LEVEL)
)%>%
ungroup()%>%
group_by(Seat)%>%
mutate(mean_seat = mean(LEVEL,na.rm = T),
sd_seat = sd(LEVEL,na.rm = T),
max_seat = max(LEVEL),
min_seat = min(LEVEL),
median_seat = median(LEVEL)
)%>%
ungroup()%>%
group_by(County,Season,Seat)%>%
mutate(mean_CSS = mean(LEVEL,na.rm = T),
sd_CSS = sd(LEVEL,na.rm = T),
max_CSS = max(LEVEL),
min_CSS = min(LEVEL),
median_CSS = median(LEVEL)
)
all%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
# some mapping table of mean and sd with level info
train%>%
group_by(County,Season)%>%
mutate(mean_county_season = mean(LEVEL,na.rm= T),
sd_county_season = sd(LEVEL,na.rm =T))%>%
ungroup()
all%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
# some mapping table of mean and sd with level info
all%>%
group_by(County,Season)%>%
mutate(mean_county_season = mean(LEVEL,na.rm= T),
sd_county_season = sd(LEVEL,na.rm =T))%>%
ungroup()
all%>%
group_by(County,Season)%>%
mutate(mean_county_season = mean(LEVEL,na.rm= T),
sd_county_season = sd(LEVEL,na.rm =T))%>%
all%>%
group_by(County,Season)%>%
mutate(mean_county_season = mean(LEVEL,na.rm= T),
sd_county_season = sd(LEVEL,na.rm =T))%>%
ungroup()
# some mapping table of mean and sd with level info
a = train%>%
group_by(County,Season)%>%
mutate(mean_county_season = mean(LEVEL,na.rm= T),
sd_county_season = sd(LEVEL,na.rm =T))%>%
ungroup()
a
a%>%View()
# some mapping table of mean and sd with level info
a = train%>%
group_by(County,Season)%>%
mutate(mean_county_season = mean(LEVEL,na.rm= T),
sd_county_season = sd(LEVEL,na.rm =T))%>%
ungroup()
# some mapping table of mean and sd with level info
a = train%>%
group_by(County,Season)%>%
mutate(mean_county_season = mean(LEVEL,na.rm= T),
sd_county_season = sd(LEVEL,na.rm =T))%>%
ungroup()%>%
group_by(County)%>%
mutate(mean_county = mean(LEVEL,na.rm= T),
sd_county = sd(LEVEL,na.rm =T),
max_county = max(LEVEL),
min_county = min(LEVEL),
median_county = median(LEVEL)
)%>%
ungroup()%>%
group_by(Season,Seat)%>%
mutate(mean_season_seat = mean(LEVEL,na.rm = T),
sd_season_seat = sd(LEVEL,na.rm =T),
max_season_seat = max(LEVEL),
min_season_seat = min(LEVEL),
median_season_seat = median(LEVEL)
)%>%
ungroup()%>%
group_by(Seat)%>%
mutate(mean_seat = mean(LEVEL,na.rm = T),
sd_seat = sd(LEVEL,na.rm = T),
max_seat = max(LEVEL),
min_seat = min(LEVEL),
median_seat = median(LEVEL)
)%>%
ungroup()%>%
group_by(County,Season,Seat)%>%
mutate(mean_CSS = mean(LEVEL,na.rm = T),
sd_CSS = sd(LEVEL,na.rm = T),
max_CSS = max(LEVEL),
min_CSS = min(LEVEL),
median_CSS = median(LEVEL)
)
a%>%View()
library(caret)
library(xgboost)
library(data.table)
library(dplyr)
library(psych)
train = read.csv('./train revise.csv')
test = read.csv('./test revise.csv')
### build xgboost as base line ####
set.seed(707)
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
mutate(Station = as.numeric(as.factor(Station)))%>%
mutate(County = as.numeric(as.factor(County)))%>%
mutate(Location = as.numeric(as.factor(Location)))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))
all%>%View()
train%>%View()
train%>%View()
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
mutate(Station = as.numeric(as.factor(Station)))%>%
mutate(County = as.numeric(as.factor(County)))%>%
mutate(Location = as.numeric(as.factor(Location)))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))%>%
mutate(ifelse(海岸段%in%c(1,3),1,0))
train%>%View()
train%>%filter(contains('雲林縣',County))
train%>%filter(contains('雲林縣',vars = County))
train%>%filter(!grepl("雲林縣",County))
train%>%filter(!grepl("雲林縣",County))%>%View()
train%>%filter(grepl("雲林縣",County))%>%View()
train%>%select(County ,Location)%>%View()
train%>%bind_rows(test)%>%
filter(grepl(c("新北",'雲林'),County) )
train%>%bind_rows(test)%>%
filter(grepl(c("新北",'雲林'),County) )%>%View()
train%>%bind_rows(test)%>%
filter_at(.vars = c(County,Location),grepl(pattern="^(E11|E16|E86|E87|E88)", .) )%>%View()
train%>%bind_rows(test)%>%
filter_at(.vars = c('County','Location'),grepl(pattern="^(E11|E16|E86|E87|E88)", .) )%>%View()
train%>%bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="^(瑞芳|大城|青草|分洪道|六輕|白玉|觀音|濆水|線西|通宵|東石|竹圍|國聖|布袋)", .)))
train%>%bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="^(瑞芳|大城|青草|分洪道|六輕|白玉|觀音|濆水|線西|通宵|東石|竹圍|國聖|布袋)", .)))%>%View()
train%>%bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|觀音|濆水|線西|通宵|東石|竹圍|國聖|布袋)", .)))%>%View()
train%>%bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|線西|通宵|東石|竹圍|國聖|布袋)", .)))%>%View()
train%>%bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|線西|通宵|竹圍|國聖|布袋)", .)))%>%View()
train%>%bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|線西|通宵|東石|竹圍|國聖|布袋)", .)))%>%View()
train%>%bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|線西|通宵|竹圍|國聖|布袋)", .)))%>%View()
56/4
train = read.csv('./train revise.csv')
test = read.csv('./test revise.csv')
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
mutate(Station = as.numeric(as.factor(Station)))%>%
mutate(County = as.factor(County))%>%
mutate(Location = as.factor(Location))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))%>%
mutate(top_13_sea_shore_direction  = ifelse(海岸段%in%c(1,3),1,0))%>%
rename(sea_shore = 海岸段)
train%>%bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|線西|通宵|竹圍|國聖|布袋)", .)))%>%View()
train = read.csv('./train revise.csv')
train = read.csv('./train revise.csv')
train%>%View()
train%>%bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|線西|通宵|竹圍|國聖|布袋)", .)))%>%View()
k= train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)
esquisse:::esquisser()
esquisse:::esquisser()
top13= train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)
# most polluted sea shore in Taiwan take up 50% of trash
mutate(top_13_for50 = sea_shore%in%c(1,3)& )%>%
left_join(
train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)%>%
select(County,Location,most_polluted_13)
)
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
#  mutate(Station = as.numeric(as.factor(Station)))%>%
#  mutate(County = as.factor(County))%>%
#  mutate(Location = as.factor(Location))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))%>%
mutate(top_13_sea_shore_direction  = ifelse(海岸段%in%c(1,3),1,0))%>%
rename(sea_shore = 海岸段)%>%
# most polluted sea shore in Taiwan take up 50% of trash
mutate(top_13_for50 = sea_shore%in%c(1,3)& )%>%
left_join(
train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)%>%
select(County,Location,most_polluted_13)
)
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
#  mutate(Station = as.numeric(as.factor(Station)))%>%
#  mutate(County = as.factor(County))%>%
#  mutate(Location = as.factor(Location))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))%>%
mutate(top_13_sea_shore_direction  = ifelse(海岸段%in%c(1,3),1,0))%>%
rename(sea_shore = 海岸段)%>%
# most polluted sea shore in Taiwan take up 50% of trash
left_join(
train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)%>%
select(County,Location,most_polluted_13)
)
all$Station
all%>%View()
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))%>%
mutate(top_13_sea_shore_direction  = ifelse(海岸段%in%c(1,3),1,0))%>%
rename(sea_shore = 海岸段)%>%
# most polluted sea shore in Taiwan take up 50% of trash
left_join(
train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)%>%
select(County,Location,most_polluted_13)
)%>%
mutate(Station = as.numeric(as.factor(Station)))%>%
mutate(County = as.factor(County))%>%
mutate(Location = as.factor(Location))
all%>%names()
library(tidyr)
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))%>%
mutate(top_13_sea_shore_direction  = ifelse(海岸段%in%c(1,3),1,0))%>%
rename(sea_shore = 海岸段)%>%
# most polluted sea shore in Taiwan take up 50% of trash
left_join(
train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)%>%
select(County,Location,most_polluted_13)
)%>%
mutate(Station = as.numeric(as.factor(Station)))%>%
mutate(County = as.factor(County))%>%
mutate(Location = as.factor(Location))%>%
replace_na(replace = most_polluted_13 = 0)
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))%>%
mutate(top_13_sea_shore_direction  = ifelse(海岸段%in%c(1,3),1,0))%>%
rename(sea_shore = 海岸段)%>%
# most polluted sea shore in Taiwan take up 50% of trash
left_join(
train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)%>%
select(County,Location,most_polluted_13)
)%>%
mutate(Station = as.numeric(as.factor(Station)))%>%
mutate(County = as.factor(County))%>%
mutate(Location = as.factor(Location))%>%
replace_na(replace = as.data.frame(most_polluted_13 = 0))
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))%>%
mutate(top_13_sea_shore_direction  = ifelse(海岸段%in%c(1,3),1,0))%>%
rename(sea_shore = 海岸段)%>%
# most polluted sea shore in Taiwan take up 50% of trash
left_join(
train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)%>%
select(County,Location,most_polluted_13)
)%>%
mutate(Station = as.numeric(as.factor(Station)))%>%
mutate(County = as.factor(County))%>%
mutate(Location = as.factor(Location))%>%
replace_na(list(most_polluted_13=0))
all$most_polluted_13%>%table()
4*13*4
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))%>%
mutate(top_13_sea_shore_direction  = ifelse(海岸段%in%c(1,3),1,0))%>%
rename(sea_shore = 海岸段)%>%
# most polluted sea shore in Taiwan take up 50% of trash
left_join(
train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)%>%
select(County,Location,most_polluted_13)
)%>%
mutate(Station = as.numeric(as.factor(Station)))%>%
mutate(County = as.factor(County))%>%
mutate(Location = as.factor(Location))%>%
replace_na(list(most_polluted_13=0))
esquisse:::esquisser()
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(station_EN))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(Seat_simple))%>%
mutate(top_13_sea_shore_direction  = ifelse(海岸段%in%c(1,3),1,0))%>%
rename(sea_shore = 海岸段)%>%
# most polluted sea shore in Taiwan take up 50% of trash
left_join(
train%>%
bind_rows(test)%>%
filter_all(any_vars(grepl(pattern="(瑞芳|大城|青草|分洪道|六輕|白玉|白水|濆水|慶安北路|通宵|竹圍|國聖|布袋)", .)))%>%
mutate(most_polluted_13 = 1)%>%
select(County,Location,most_polluted_13)
)%>%
mutate(Station = as.numeric(as.factor(Station)))%>%
mutate(County = as.factor(County))%>%
mutate(Location = as.factor(Location))%>%
replace_na(list(most_polluted_13=0))
all%>%names()
